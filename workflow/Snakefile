from os.path import basename
from glob import glob
from types import SimpleNamespace
import os
configfile: 'conf/config.yaml'

# This allows for dot (.) access instead of dict access
# of configuration parameters.
# EXAMPLE: config['ABC'] becomes config.ABC
config = SimpleNamespace(**config)

# file follows {sample}_{BL|TI}.bam name scheme
samples = list(set([basename(x).split('_')[0]
    for x in glob(os.path.join(config.bam_dir, '*.bam'))]))


rule All:
    input:
        expand(f'{config.outdir}/manta/{{sample}}_manta/results/variants/somaticSV.vcf.gz', sample=samples)

# ==============================================================================
# Installation Rules
# ==============================================================================
rule InstallExcord:
    """
    Pull excord bin from github release
    """
rule InstallGiggle:
    """
    Build giggle from source
    """
rule InstallStix:
    """
    Build stix and dependencies from source (Depends on giggle)
    """

rule InstallDelly:
    """
    Install delly from github"""
rule InstallManta:
    """
    Install manta from github release.
    """
    input:
        script = "scripts/install_manta.sh"
    output:
        # config is in bin/configManta.py
        installation = f'{config.manta_install_dir}/manta-{config.manta_version}.centos6_x86_64/bin/configManta.py'

    shell:
        """
        {input.script} {config.manta_install_dir} {config.manta_version}
        """

# ==============================================================================
# TODO STIX index creation
# Create a STIX index with tumor samples
# ==============================================================================

rule ExcordTumors:
    """
    Extract discordant/split reads from tumor BAMs
    """
rule MakeGiggleIndex:
    """
    Create giggle index from excord bedpe's
    """

rule MakeSTIXIndex:
    """
    Create STIX index from giggle index
    """

# ==============================================================================
# Delly Rules
# ==============================================================================
rule delly_bcf:
    input:
        ref = f'{config.reference}',
        alns = f'{config.bam_dir}/{{sample}}_TI.bam',
        exclude = f'{config.delly_excl}'
    output:
        f'{config.outdir}/delly/{{sample}}.bcf',
    conda:
        'envs/callers.yaml'
    params:
        uncompressed_bcf=True,
    log:
        f'{config.outdir}/delly/logs/{{sample}}_delly.log',
    threads: 2  # It is best to use as many threads as samples
    wrapper:
        "v1.19.2/bio/delly"


# ==============================================================================
# MANTA Rules
# ==============================================================================

rule ConfigManta:
    """
    Configure the manta calling workflow
    """
    input:
        configManta = f'{rules.InstallManta.output.installation}',
        tumor_bam = f'{config.bam_dir}/{{sample}}_TI.bam',
        normal_bam = f'{config.bam_dir}/{{sample}}_BL.bam',
        reference = f'{config.reference}'
    params:
        rundir = f'{config.outdir}/manta/{{sample}}_manta'
    output:
        runPy = f'{config.outdir}/manta/{{sample}}_manta/runWorkflow.py'
    shell:
        """
        {input.configManta} \
        --tumorBam       {input.tumor_bam} \
        --normalBam      {input.normal_bam} \
        --referenceFasta {input.reference} \
        --runDir         {params.rundir} 
        """

rule RunManta:
    """
    Run manta
    """
    input:
        rundir = f'{rules.ConfigManta.output.runPy}'
    output: 
        manta_vcf = f'{config.outdir}/manta/{{sample}}_manta/results/variants/somaticSV.vcf.gz'
    shell:
        """
        {input.rundir} \
        -m local \
        -j {threads} \
        --quiet
        """



# ==============================================================================
# TODO Smoove (lumpy/SVTYPER) rules
# Lumpy will just report all SVs so filtering will need to be done
# with STIX to get rid of germline variants
# ==============================================================================

# ==============================================================================
# TODO STIX filtering for germline SV callers
# ==============================================================================
